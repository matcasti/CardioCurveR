[{"path":[]},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to CardioCurveR","title":"Contributing to CardioCurveR","text":"outlines propose change CardioCurveR. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to CardioCurveR","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to CardioCurveR","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to CardioCurveR","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"matcasti/CardioCurveR\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to CardioCurveR","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to CardioCurveR","text":"Please note CardioCurveR project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 CardioCurveR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with CardioCurveR","title":"Getting help with CardioCurveR","text":"Thanks using CardioCurveR! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with CardioCurveR","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with CardioCurveR","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with CardioCurveR","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://matcasti.github.io/CardioCurveR/articles/CardioCurveR.html","id":"welcome-to-your-in-depth-introduction-to-cardiocurver","dir":"Articles","previous_headings":"","what":"Welcome to Your In-Depth Introduction to CardioCurveR!","title":"Get Started","text":"Welcome! guide serves comprehensive first step world CardioCurveR, R package specifically designed analyzing dynamic changes heart rate intervals (known R-R intervals) exercise recovery periods. Understanding dynamics crucial various fields, sports science physiology clinical research, provides deep insights cardiovascular control, fitness levels, autonomic nervous system function. tutorial structured practical, hands-example, meaning won’t just talk concepts; ’ll actively apply using R code. get absolute learning experience, strongly encourage execute code snippets provided progress material. can dive exciting analysis, first, essential prerequisite ensuring CardioCurveR package, along software packages relies , correctly installed within R environment. R packages collections functions, data, compiled code well-defined format, created add specific functionality. haven’t installed CardioCurveR yet, can executing following command directly within R console. single command handles just main package also fetches installs packages CardioCurveR needs operate correctly, thanks dependencies = TRUE argument. argument incredibly useful saves trouble identifying installing required package manually, streamlining setup process considerably. Make sure active internet connection running command, R needs download package files Comprehensive R Archive Network (CRAN) another specified repository. Depending number dependencies, process might take minutes.","code":"# Install the main CardioCurveR package # The 'dependencies = TRUE' argument is crucial here. It tells R to # automatically identify, download, and install all other packages # that CardioCurveR needs to function properly. This often includes # packages for data manipulation, plotting, statistical modeling, etc. # This ensures a complete and functional setup with a single command.  install.packages(\"CardioCurveR\", dependencies = TRUE)"},{"path":"https://matcasti.github.io/CardioCurveR/articles/CardioCurveR.html","id":"prepare-your-r-workspace-loading-necessary-packages","dir":"Articles","previous_headings":"","what":"Prepare Your R Workspace: Loading Necessary Packages","title":"Get Started","text":"successfully installed CardioCurveR dependencies previous step, now need make functionalities available within current R session. Installation one-time process (per R installation major update), loading package required every time start new R session intend use functions package. Think installation putting book bookshelf, loading like taking specific book shelf read . standard procedure using R package follows two distinct steps: Installation: Ensure package physically present system’s library. achieved using install.packages(\"package_name\") command, ’ve already completed CardioCurveR. Loading: Bring package’s functions, datasets, objects current R session’s memory can directly call . done using library(package_name) command. step essentially attaches package search path, allowing R find functions associated . Therefore, prepare workspace analysis visualization tasks ahead, need explicitly load CardioCurveR another helpful package, ggplot2. ggplot2 widely acclaimed package creating sophisticated aesthetically pleasing data visualizations, strictly necessary core modeling function CardioCurveR, greatly enhances ability explore present results effectively. Execute following code block R console: running library() commands, telling R: “Make functions capabilities contained within CardioCurveR ggplot2 packages ready use right now.”. encounter error message like “package called…”, double-check installation step completed without errors.","code":"# Load the core package for this tutorial. Once loaded, functions like # import_RRi_txt() and estimate_RRi_curve() become directly available. library(CardioCurveR)  # Load the ggplot2 package. This package provides powerful and flexible # tools for creating a wide variety of plots beyond R's base graphics. # We'll use it later for potentially more advanced or customized visualizations, # although the base plot functions will also be demonstrated. library(ggplot2)"},{"path":"https://matcasti.github.io/CardioCurveR/articles/CardioCurveR.html","id":"defining-our-subject-importing-the-heart-rate-interval-data","dir":"Articles","previous_headings":"","what":"Defining Our Subject: Importing the Heart Rate Interval Data","title":"Get Started","text":"R environment properly set necessary packages loaded, arrive core data analysis task: acquiring data . context CardioCurveR, primarily interested sequences R-R intervals. R-R interval (RRi) represents time duration, typically measured milliseconds (ms), two consecutive R waves electrocardiogram (ECG). R wave usually prominent peak ECG signal, corresponding main contraction (depolarization) heart’s ventricles. Therefore, sequence R-R intervals provides precise, beat--beat measure heart rate variability time. data format CardioCurveR primarily designed work intentionally simple widely compatible. expects plain text file (often .txt extension) line contains single numerical value representing one R-R interval duration milliseconds. straightforward, one-value-per-line format common output option exporting raw beat--beat data various heart rate monitoring devices, including clinical-grade ECG recorders, research-focused ambulatory monitors, consumer chest straps (like Polar Garmin), even advanced smartwatches. simplicity ensures broad usability. (Aside: allow actively participate replicate analysis steps shown , can download example dataset ’ll using throughout tutorial: example_data.txt. Please download file save location computer can easily find , working directory R project.) Importing type data file R using CardioCurveR facilitated dedicated import_RRi_txt() function. crucial piece information function needs path data file computer. file path like specific address tells R exactly locate file. needs provided character string (enclosed quotes). ’s two-step process: Alternative File Selection: specifying file paths feels cumbersome ’re unsure exact location syntax, R provides interactive alternative. can replace code Step 1 my_file <- file.choose(). Executing open operating system’s standard file selection dialog box, allowing navigate folders click desired example_data.txt file directly. method often intuitive, especially users less familiar command-line interfaces file system structures. data successfully imported stored my_data variable (now R object called data frame, containing columns time RRi), good first step always visualize . gives us immediate qualitative feel data’s pattern. can achieve quick basic plot using R’s built-plot() function:  plot see represents R-R intervals duration recording. However, ’s important understand data displayed might already undergone pre-processing. default, import_RRi_txt() function performs crucial cleaning steps enhance data quality. Firstly, attempts identify remove ectopic beats, .e., heartbeats originating locations sinoatrial node (heart’s natural pacemaker), can manifest unusually short long RR intervals disrupt underlying physiological rhythm. Removing artifacts vital accurate modeling intended cardiovascular response. Secondly, function offers option (enabled default, controllable via arguments) apply Butterworth low-pass filter. type digital filter helps smooth high-frequency noise data, might arise measurement inaccuracies minor physiological fluctuations, without distorting main trend exercise response recovery. filtering uses zero-phase approach (filtfilt) avoid introducing time delays signal. comprehensive understanding import options, including controlling filtering process, specifying time units, handling different file encodings, consult function’s detailed documentation typing ?import_RRi_txt R console. help page provides full description arguments functionalities.","code":"## Step 1: Define the file path # We create a variable 'my_file' to store the name (and potentially path) # of our data file. If \"example_data.txt\" is in your current R working directory, # just the filename is sufficient. Otherwise, you'd provide the full path, # e.g., \"C:/Users/YourName/Documents/example_data.txt\" or \"/home/yourname/data/example_data.txt\". # Remember to use forward slashes '/' even on Windows. my_file <- \"example_data.txt\"  ## Step 2: Import the data using the specified path # The import_RRi_txt function reads the file line by line, expecting each line # to contain a single R-R interval value. It performs initial validation and # returns the data in a structured format (a data frame) suitable for further analysis. my_data <- import_RRi_txt(my_file) ## Step 3: Generate a preliminary plot of the imported R-R intervals # We pass the imported data frame 'my_data' to the plot function. # The 'type = \"l\"' argument specifically requests a line plot, # connecting the consecutive R-R interval points over time, which is # ideal for visualizing trends in time-series data like this. plot(my_data, type = \"l\")"},{"path":"https://matcasti.github.io/CardioCurveR/articles/CardioCurveR.html","id":"applying-the-model-fitting-a-curve-to-the-dynamics","dir":"Articles","previous_headings":"","what":"Applying the Model: Fitting a Curve to the Dynamics","title":"Get Started","text":"now arrive central revealing part analysis: mathematically modeling observed pattern R-R intervals exercise recovery sequence. goal fit specific mathematical curve captures characteristic physiological changes, .e., initial drop RRi (increase heart rate) onset exercise, stabilization exertion (present), subsequent rise RRi (decrease heart rate) recovery phase. Fortunately, CardioCurveR encapsulates complexity modeling process within single, user-friendly function: estimate_RRi_curve(). underlying mathematics optimization algorithms sophisticated (indeed, development package involved significant effort make step straightforward user), applying model remarkably simple. just need provide time data corresponding R-R interval data function. convenient way data data frame like my_data (columns named time RRi prepared import_RRi_txt) use () function. () allows us evaluate R expression within context specific data environment (data frame), can refer columns time RRi directly name without needing repeatedly type my_data$time my_data$RRi. ’s fit model: Executing line performs core computation. estimate_RRi_curve() function fits predefined non-linear model (based work cited later) time RRi data points, estimating parameters model using numerical optimization methods. result stored new R object, ’ve named my_model. object now contains information fitted curve, including estimated parameter values, goodness--fit statistics, . Okay, calculation done… mean? model actually fit data well, poor representation? interpreting parameters, ’s crucial assess quality model fit. standard way get statistical overview fitted model R using summary() function. Applying summary() my_model object print key information, estimated values model parameters, standard errors (measure uncertainty), overall goodness--fit metrics like residual standard error R-squared. Let’s examine summary: addition numerical summary, visual diagnostics indispensable judging model fit, especially time-series non-linear data. CardioCurveR provides specialized plot() method objects created estimate_RRi_curve(). Calling plot() my_model object generates set diagnostic plots specifically designed type analysis. plots typically include: Fitted Curve vs. Data: original R-R interval data points plotted alongside smooth curve predicted fitted model. allows direct visual assessment well curve captures overall trend shape data. Residuals vs. Time: plot residuals (differences observed RRi values values predicted model) time. Ideally, residuals appear randomly scattered around zero, without obvious patterns trends. Patterns residuals might indicate model inadequacy (e.g., chosen curve shape doesn’t fully capture dynamics) issues like non-constant variance. Histogram Residuals: plot overall distribution model residuals (.e., far data points predicted value). type plots helps us understand model capturing data properly. strive look histogram (approximately) normally distributed residuals centered zero. Let’s generate diagnostic visualizations:  Carefully examining plots crucial. fitted line follow data points reasonably well? residuals look like random noise around zero, systematic pattern left unexplained model? Answering questions helps build confidence (reveals concerns) validity model proceeding interpret parameters.","code":"## Step 4: Fit the specialized R-R interval curve model # We use with(my_data, ...) to temporarily make the columns of 'my_data' # directly accessible. Inside, we call estimate_RRi_curve(), passing the # 'time' column as the independent variable (x-axis) and the 'RRi' column # as the dependent variable (y-axis) that we want to model. # The function applies the specific mathematical model developed for # exercise RRi dynamics and uses optimization techniques to find the # parameter values that make the curve best fit the observed data points. # The result, containing the fitted model and its parameters, is stored # in the 'my_model' object. my_model <- with(my_data, estimate_RRi_curve(time, RRi)) ## Step 5: Obtain a statistical summary of the fitted model # The summary() function is a generic function in R that provides a # condensed overview of an object. When applied to model objects like # the one returned by estimate_RRi_curve(), it typically displays # parameter estimates, uncertainty measures, and fit statistics. summary(my_model) #> Summary of RRi_fit Object #> Optimization Method: L-BFGS-B  #> Estimated Parameters: #>        alpha         beta            c       lambda          phi          tau  #>  801.9017917 -468.1684814    0.7966331   -2.6606101   -1.5997960    7.7939789  #>        delta  #>    2.0515660  #>  #> Objective Value (Huber loss): 1777818  #> Residual Sum of Squares (RSS): 3924430  #> Total Sum of Squares (TSS): 26051637  #> R-squared: 0.8494  #> Root Mean Squared Error (RMSE): 44.8  ms  #> Mean Absolute Percentage Error (MAPE): 5.5  %  #> Number of observations: 1956  #> Convergence Code: 0  # Alternatively, simply printing the model object often gives a concise # view focused primarily on the parameter estimates, which we'll also use later. # print(my_model) # Calling plot() on the 'my_model' object invokes a specialized plotting # method designed for CardioCurveR model results. It generates multiple # informative plots arranged together, helping us visually assess the # model's performance and assumptions. The chunk options fig.height and # out.width are used here to adjust the display size in the output document. plot(my_model)"},{"path":"https://matcasti.github.io/CardioCurveR/articles/CardioCurveR.html","id":"making-sense-of-the-fit-interpreting-the-model-parameters","dir":"Articles","previous_headings":"","what":"Making Sense of the Fit: Interpreting the Model Parameters","title":"Get Started","text":"Now successfully fitted mathematical model R-R interval data performed initial checks quality fit using numerical summaries diagnostic plots, can move insightful step: understanding model’s parameters tell us underlying physiological response exercise bout. Let’s first recall estimated parameter values printing model object , focusing specifically section detailing estimates: Look closely output section labeled “Estimated Parameters” (similar). ’ll see several parameters, often denoted Greek letters (alpha, beta, lambda, tau, etc.). just abstract mathematical constants; one designed quantify specific aspect heart rate dynamic curve observed exercise recovery. provide concise, quantitative description individual’s cardiovascular response profile. understand meaning, let’s refer illustrative figure showing typical R-R interval curve exercise protocol (like rest-exercise-recovery) parameters relate different phases features:  Let’s break physiological interpretation key parameter, relating curve’s shape: α\\alpha (alpha): Baseline RRi. parameter represents initial, resting R-R interval duration onset exercise stimulus. essentially anchors start curve reflects individual’s baseline heart rate (longer RRi means lower heart rate). β\\beta (beta): Amplitude RRi Drop. parameter quantifies magnitude decrease R-R interval duration baseline (α\\alpha) approximate lowest point reached exercise phase. larger (negative, larger absolute value) β\\beta indicates greater overall reduction RRi (.e., larger increase heart rate) response exercise challenge. λ\\lambda (lambda): Steepness RRi Drop. Lambda controls rapidly R-R interval decreases initial phase exercise (“-transient”). larger λ\\lambda value corresponds steeper, faster drop RRi (quicker heart rate acceleration) exercise begins. τ\\tau (tau): Time Center Drop. parameter represents approximate time point around main decrease R-R interval occurs. essentially locates midpoint primary transition rest exercise heart rate level along time axis. cc (c): Recovery Amplitude Scaling. parameter cc relates amplitude R-R interval recovery exercise cessation amplitude initial drop (β\\beta). scales much RRi increases recovery relative much decreased exercise onset. Values around 1 might suggest recovery roughly mirrors initial drop magnitude, values indicate different recovery extents. ϕ\\phi (phi): Steepness Recovery Phase. Similar λ\\lambda drop, ϕ\\phi controls steepness rate R-R interval increase post-exercise recovery period (“-transient”). larger ϕ\\phi value indicates faster recovery, meaning heart rate decelerates quickly back towards baseline levels exercise stops. δ\\delta (delta): Time Shift Recovery Phase. Delta adjusts temporal position recovery phase relative drop phase centered τ\\tau. allows model account situations recovery might start slightly expected based solely timing drop, adding flexibility capture precise timing -kinetics. , examining estimated parameters (α,β,λ,τ,c,ϕ,δ\\alpha, \\beta, \\lambda, \\tau, c, \\phi, \\delta), gain multi-faceted quantitative summary individual’s heart rate dynamics throughout entire rest-exercise-recovery protocol. parameters can compared across individuals, conditions, interventions study differences cardiovascular control, fitness, effects training. ! detailed walkthrough covers essential workflow using CardioCurveR import R-R interval data, fit specialized physiological model developed described scientific literature (specifically referencing Castillo-Aguilar et al. (2025) – note: please verify citation might hypothetical require updating), interpret resulting parameters. Now well-equipped apply methodology datasets explore using provided example data file. analysis doesn’t necessarily stop . fitted model object (my_model) can serve basis advanced statistical techniques. instance, one perform bootstrap resampling obtain robust estimates uncertainty surrounding parameter (confidence intervals). Alternatively, adopting Bayesian statistical framework provide richer insights posterior distributions parameters, allowing probabilistic statements values. However, advanced topics extend beyond introductory tutorial avenues future exploration. hope comprehensive guide proves valuable work. Best luck R-R interval analyses using CardioCurveR!","code":"# Printing the model object provides a concise output, often highlighting # the core results, particularly the estimated parameter values. print(my_model) #> RRi_fit Object #> Optimization Method: L-BFGS-B  #> Estimated Parameters: #>        alpha         beta            c       lambda          phi          tau  #>  801.9017917 -468.1684814    0.7966331   -2.6606101   -1.5997960    7.7939789  #>        delta  #>    2.0515660  #> Objective Value (Huber loss): 1777818  #> Convergence Code: 0"},{"path":"https://matcasti.github.io/CardioCurveR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matías Castillo-Aguilar. Author, maintainer, copyright holder.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castillo-Aguilar M, Mabe-Castro D, Medina D, Núñez-Espinosa C (2025). “Enhancing cardiovascular monitoring: non-linear model characterizing RR interval fluctuations exercise recovery.” Scientific Reports, 15(1), 8628. doi:10.1038/s41598-025-93654-6. Castillo-Aguilar M (2025). CardioCurveR: Nonlinear Modeling R-R Interval Dynamics. https://github.com/matcasti/CardioCurveR.","code":"@Article{,   title = {Enhancing cardiovascular monitoring: a non-linear model for characterizing RR interval fluctuations in exercise and recovery},   author = {Matías Castillo-Aguilar and Diego Mabe-Castro and David Medina and Cristian Núñez-Espinosa},   journal = {Scientific Reports},   year = {2025},   volume = {15},   number = {1},   pages = {8628},   doi = {10.1038/s41598-025-93654-6}, } @Manual{,   title = {CardioCurveR: Nonlinear Modeling of R-R Interval Dynamics},   author = {Matías Castillo-Aguilar},   year = {2025},   url = {https://github.com/matcasti/CardioCurveR}, }"},{"path":[]},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"nonlinear-modeling-of-r-r-interval-dynamics-with-cardiocurver","dir":"","previous_headings":"","what":"Nonlinear Modeling of R-R Interval Dynamics with CardioCurveR","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"CardioCurveR offers sophisticated yet accessible framework specifically engineered quantitative analysis R-R interval (RRi) dynamics, particularly response physiological stimuli like exercise. Modeling dynamics accurately crucial understanding cardiovascular control, presents challenges due complex, non-linear nature heart rate changes presence noise artifacts typical recordings. core package built upon dual-logistic mathematical model, meticulously detailed Castillo-Aguilar et al. (2025). specific model structure chosen elegantly captures two primary phases characteristic many exercise protocols: relatively rapid decrease RRi (increase heart rate) onset exertion, followed distinct recovery phase RRi increases (heart rate decreases) cessation exercise. Mathematically, relationship R-R interval (RRiRRi) time (tt) expressed following equation: RRi(t)=α⏟Baseline+β1+eλ(t−τ)⏟Drop Phase+−c⋅β1+eϕ(t−τ−δ)⏟Recovery Phase RRi(t) = \\underbrace{\\alpha}_{\\text{Baseline}} + \\underbrace{\\frac{\\beta}{1 + e^{\\lambda\\ (t-\\tau)}}}_{\\text{Drop Phase}} + \\underbrace{\\frac{-c\\ \\cdot \\beta}{1 + e^{\\phi\\ (t-\\tau-\\delta)}}}_{\\text{Recovery Phase}} Let’s dissect equation physiological meaning imbued parameters: equation essentially combines two logistic functions (S-shaped curves) represent two key transitions. α\\alpha (alpha): Baseline RRi Level. parameter establishes foundational, resting R-R interval duration significant change occurs, typically representing pre-exercise state. ’s value curve approaches time (tt) goes towards negative infinity (start observation period). β\\beta (beta): Primary Amplitude Change (Drop). Beta governs total magnitude decrease RRi exercise onset phase. Since β\\beta typically negative RRi drop (heart rate increase), absolute value represents depth initial response relative baseline α\\alpha. λ\\lambda (lambda): Steepness Drop Phase. parameter dictates rate change initial RRi decrease. larger absolute value λ\\lambda (given ’s usually negative drop) results sharper, faster transition resting state exercise state. τ\\tau (tau): Temporal Center Drop Phase. Tau pinpoints time point around significant portion RRi drop occurs. acts inflection point first logistic component, effectively locating exercise onset transition time. cc (c): Recovery Amplitude Scaling Factor. parameter links magnitude recovery phase magnitude initial drop (β\\beta). term -c * \\beta defines amplitude increase RRi recovery. c=1c=1, recovery amplitude mirrors drop amplitude. Values cc different 1 allow model capture scenarios recovery magnitude differs initial drop (e.g., incomplete recovery within observed timeframe). ϕ\\phi (phi): Steepness Recovery Phase. Analogous λ\\lambda, ϕ\\phi controls steepness rate change post-exercise recovery phase (RRi increase). larger absolute value ϕ\\phi (usually negative formulation increasing RRi recovery described second logistic term’s structure) signifies faster return towards baseline new steady state. δ\\delta (delta): Temporal Shift Recovery Phase. Delta introduces time delay advance recovery phase relative drop phase centered τ\\tau. allows recovery curve component (second logistic function) centered effectively $t = \\\\tau + \\\\delta$, providing flexibility accurately model timing end exercise stimulus initiation recovery dynamics. Detailed breakdown showing alpha sets baseline, first logistic term creates drop controlled beta, lambda, tau, second logistic term creates recovery controlled c*beta, phi, delta. Beyond core modeling equation, CardioCurveR integrates crucial pre-processing steps essential handling real-world data. employs advanced signal filtering techniques, specifically utilizing zero-phase Butterworth low-pass filter. low-pass filter designed remove high-frequency fluctuations, often considered noise (e.g., measurement inaccuracies, muscle artifacts, minor physiological variations), preserving slower, underlying trend interest (exercise recovery response). “Butterworth” design provides maximally flat frequency response passband. Critically, filtering applied using “zero-phase” technique (commonly achieved forward-backward filtering, like filtfilt function used internally). ensures filtering process introduce time lag shift signal, vital accurately estimating time-related parameters like τ\\tau δ\\delta. Furthermore, CardioCurveR addresses common issue edge artifacts – distortions filtering can introduce beginning end signal due filter’s initialization settling requirements. package includes mechanisms, like trimming small number samples ends post-filtering, mitigate impact artifacts subsequent modeling. comprehensive approach ensures RRi data fed non-linear modeling stage clean representative true physiological dynamics.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"installation-guide-getting-cardiocurver-into-your-r-environment","dir":"","previous_headings":"","what":"Installation Guide: Getting CardioCurveR into Your R Environment","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"two primary ways install CardioCurveR package, depending whether need official stable release latest development version.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"id_1-installing-the-stable-version-from-cran-recommended","dir":"","previous_headings":"Installation Guide: Getting CardioCurveR into Your R Environment","what":"1. Installing the Stable Version from CRAN (Recommended)","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"users, recommended method install package Comprehensive R Archive Network (CRAN). CRAN hosts official releases R packages undergone checks considered stable. Installation CRAN typically straightforward usually provides pre-compiled versions (binaries) Windows macOS, avoiding need additional system tools. install stable version CardioCurveR CRAN, simply run following command R console: Make sure active internet connection. command download package files CRAN mirror install R library, making package ready loaded library(CardioCurveR). generally easiest reliable installation method regular use.","code":"# Installs the official release version of CardioCurveR from CRAN # R will automatically handle downloading and installing any required # dependency packages as well. install.packages(\"CardioCurveR\")"},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"id_2-installing-the-development-version-from-github-advanced-users--latest-features","dir":"","previous_headings":"Installation Guide: Getting CardioCurveR into Your R Environment","what":"2. Installing the Development Version from GitHub (Advanced Users / Latest Features)","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"Alternatively, want access absolute latest features, improvements, bug fixes might yet available official CRAN release, can install development version directly GitHub repository. method requires devtools package, toolkit specifically designed package development tasks, including installing packages GitHub. First, ensure devtools package installed. following R code checks devtools present installs CRAN necessary: devtools available, can use install_github() function download install CardioCurveR directly specified repository (‘matcasti/CardioCurveR’): Note GitHub Installations: Installing GitHub compiles package source. operating systems, might require additional development tools: * Windows: may need install Rtools. * macOS: might need Xcode Command Line Tools. * Linux: typically need r-base-dev, build-essential, similar packages providing C/C++/Fortran compilers. Check R documentation messages installation encounter issues related compilation. method choose? Use install.packages(\"CardioCurveR\") stable, officially released version (recommended users reproducible research). Use devtools::install_github(\"matcasti/CardioCurveR\") specifically need latest development updates features yet CRAN, comfortable potentially needing extra setup steps source compilation. installation using either method, can load package R session using library(CardioCurveR).","code":"# Check if the 'devtools' package is installed. # 'requireNamespace' checks without loading the package, and 'quietly = TRUE' # suppresses messages. If it returns FALSE, 'devtools' is not installed. if (!requireNamespace(\"devtools\", quietly = TRUE)) {   # If 'devtools' is not found, install it from CRAN first.   # This requires an internet connection.   install.packages(\"devtools\") } # Use devtools::install_github() to install CardioCurveR # directly from the 'matcasti/CardioCurveR' GitHub repository. # This function downloads the source code, potentially compiles # code if needed (see note below), and installs the package. devtools::install_github(\"matcasti/CardioCurveR\")"},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"exploring-the-core-functions-of-cardiocurver","dir":"","previous_headings":"","what":"Exploring the Core Functions of CardioCurveR","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"CardioCurveR package provides suite functions designed streamline process analyzing RRi data, cleaning filtering modeling estimation. ’s detailed look key functions:","code":""},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"dual_logistic-implementing-the-core-mathematical-model","dir":"","previous_headings":"Exploring the Core Functions of CardioCurveR","what":"dual_logistic(): Implementing the Core Mathematical Model","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"function serves mathematical engine package. directly implements dual-logistic equation described previously: RRi(t)=α+β1+eλ(t−τ)−cβ1+eϕ(t−τ−δ) RRi(t) = \\alpha + \\frac{\\beta}{1 + e^{\\lambda (t-\\tau)}} - \\frac{c\\,\\beta}{1 + e^{\\phi (t-\\tau-\\delta)}} Purpose: primary role calculate predicted R-R interval value(s) based dual-logistic model given set time points specific set parameter values. Inputs: time: numeric vector representing time points want calculate RRi values. params: named vector list containing values seven model parameters: alpha, beta, lambda, tau, c, phi, delta. names must match exactly. Output: returns numeric vector length input time vector, containing calculated RRi values according model provided parameters. Usage: function used internally estimation function (estimate_RRi_curve) optimization process. ’s also extremely useful users simulate theoretical curves (shown example) generate predicted RRi values model fitted.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"estimate_rri_curve-estimating-model-parameters-from-data","dir":"","previous_headings":"Exploring the Core Functions of CardioCurveR","what":"estimate_RRi_curve(): Estimating Model Parameters from Data","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"arguably central function users analyzing data. takes empirical RRi data finds optimal set parameters dual_logistic model best describes data. Purpose: perform non-linear regression, estimating seven parameters (α,β,λ,τ,c,ϕ,δ\\alpha, \\beta, \\lambda, \\tau, c, \\phi, \\delta) dual-logistic model based observed time RRi data. Methodology: Optimization: employs R’s powerful optim() function numerical optimization. default, uses \"L-BFGS-B\" method, quasi-Newton algorithm capable handling box constraints (lower upper bounds) parameters. important ensuring physiologically plausible parameter estimates (e.g., constraining α\\alpha positive). Loss Function: Instead minimizing standard sum squared errors (sensitive outliers), function minimizes Huber loss. Huber loss function robust alternative behaves like squared error loss small errors like absolute error loss large errors. makes parameter estimation less influenced potential outliers unusually noisy data points might still present initial cleaning. Inputs: time: numeric vector time points corresponding RRi measurements. RRi: numeric vector observed R-R interval measurements. Output: returns list-like object containing detailed results estimation, including estimated parameters, goodness--fit statistics (like R-squared, RMSE, MAPE), information optimization convergence, potentially residuals.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"filter_signal-pre-processing-via-signal-filtering","dir":"","previous_headings":"Exploring the Core Functions of CardioCurveR","what":"filter_signal(): Pre-processing via Signal Filtering","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"function handles crucial step noise reduction raw RRi signal modeling. Purpose: apply digital low-pass filter RRi time series smooth high-frequency noise preserving underlying physiological trend. Methodology: Filter Type: uses Butterworth filter, known flat response frequency range allows (passband), avoiding ripples. Zero-Phase Filtering: applies filter using forward--backward pass (filtfilt methodology). clever technique effectively cancels phase distortion (time delay) standard one-way filter introduce, critical accurate temporal parameter estimation. Edge Effect Mitigation: Recognising digital filters can produce unreliable values start end signal (due initialization effects), function typically includes step trim specified number data points ends filtered signal. corresponding time points also removed maintain alignment. Users aware slightly shortens time series analyzed. Inputs: RRi: numeric vector RRi signal filtered. arguments (check function documentation ?filter_signal) likely control filter order, cutoff frequency, number points trim. Output: numeric vector containing filtered RRi signal (potentially shorter input due trimming).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"clean_outlier-adaptive-cleaning-of-ectopic-beats-and-noise","dir":"","previous_headings":"Exploring the Core Functions of CardioCurveR","what":"clean_outlier(): Adaptive Cleaning of Ectopic Beats and Noise","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"function provides sophisticated method identifying correcting outlier points RRi signal, often corresponding ectopic beats significant measurement errors. Purpose: detect physiologically implausible RRi values (outliers) replace reasonable estimates based local trend signal. Methodology: Trend Estimation: first fits LOESS (Locally Estimated Scatterplot Smoothing) model RRi data. LOESS non-parametric technique fits simple polynomial models localized subsets data, providing flexible way capture underlying, possibly non-linear, trend without assuming global structure like dual-logistic model yet. Residual Calculation: calculates residuals, differences original RRi values values predicted LOESS smooth curve. Outlier Detection: Outliers identified based residuals. point flagged outlier residual exceeds certain threshold. threshold typically defined multiple (e.g., 3 4) robust measure spread residuals, usually Median Absolute Deviation (MAD). Using MAD makes detection process robust presence outliers (unlike standard deviation). gaussian: Replace random value drawn Gaussian distribution centered LOESS prediction, variance estimated non-outlier residuals. uniform: Replace random value drawn uniform distribution around LOESS prediction. loess: Simply replace value predicted LOESS smooth curve time point. choice method depends whether user prefers smoother replacement wants retain local variability. Inputs: RRi: numeric vector RRi signal containing potential outliers. Arguments control LOESS span, outlier threshold (multiple MAD), replacement method (check ?clean_outlier). Output: numeric vector RRi signal identified outliers replaced.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"comprehensive-example-workflow-from-simulation-to-estimation","dir":"","previous_headings":"","what":"Comprehensive Example Workflow: From Simulation to Estimation","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"extended example provides practical demonstration entire CardioCurveR workflow, starting simulating data mimics real-life RRi signals, applying cleaning filtering, fitting model, finally evaluating results. invaluable understanding different functions work together verifying package’s capabilities. First, ensure CardioCurveR package loaded current R session (assuming successfully installed per instructions ). Next, ’ll simulate RRi dataset. start defining time sequence using dual_logistic() function known set ‘true’ parameters generate perfect, theoretical RRi curve. represents underlying physiological process aim uncover later. parameters chosen based typical values reported literature, Castillo-Aguilar et al. (2025). Let’s peek structure simulated theoretical data. ’s simply sequence RRi values corresponding time point. Visualizing theoretical curve helps understand ideal shape defined parameters. ’ll use powerful ggplot2 package creating informative plots.  Real-world RRi data never perfectly smooth. make simulation realistic, ’ll add random noise. use rnorm() generate noise normal (Gaussian) distribution mean 0 specified standard deviation (sd = 50 ms case), adding theoretical curve. set.seed(123) ensures random noise generated reproducible run code . Let’s visualize noisy signal. also add vertical lines text annotations indicate hypothetical rest, exercise, recovery periods, based loosely tau delta parameters.  mimic reality, physiological signals often contain artifacts like ectopic beats. simulate randomly selecting small percentage (5%) data points drastically altering values (multiplying 0.3 1.7). Now, let’s visualize signal noise simulated ectopic beats. represents challenging ‘raw’ data often start .  (Aside: simulated dataset, including noise ectopics, actually included within CardioCurveR package sim_RRi. can load using data(sim_RRi) explore documentation ?sim_RRi practice.) Okay, realistic messy simulated data. crucial question : Can CardioCurveR effectively process signal recover underlying smooth, theoretical curve started ? core challenge package aims solve.","code":"# Load the package to make its functions available library(CardioCurveR) # Create a time vector from 0 to 20 minutes with steps of 0.01 minutes. # This high resolution simulates beat-to-beat data. time <- seq(0, 20, by = 0.01)  # Define a list containing the 'true' parameter values that will generate our signal. # These represent a hypothetical ground truth for simulation purposes. true_params <- list(alpha = 800, beta = -375, c = 0.85,                     lambda = -3, phi = -2,                     tau = 6, delta = 3) # Note: Parameter values are illustrative  # Calculate the theoretical RRi values at each time point using the dual_logistic function # and the defined true parameters. RRi_theoretical <- dual_logistic(time, true_params) #>       time  RRi_theoretical #> 1        0 799.999999143314 #> 2     0.01 799.999999067449 #> 3     0.02 799.999998988268 #> ...    ...              ... #> 1999 19.98 743.749999907457 #> 2000 19.99  743.74999990929 #> 2001    20 743.749999911086 library(ggplot2) # Ensure ggplot2 is loaded  # Create a plot of the theoretical RRi curve against time ggplot() +   # Add a line geom mapping time to x-axis and theoretical RRi to y-axis   geom_line(aes(time, RRi_theoretical), linewidth = 1, col = \"purple\") +   # Add informative labels and title   labs(title = \"Theoretical Dual-Logistic RRi Model\",        subtitle = \"Generated using dual_logistic() with true_params\",        x = \"Time (minutes)\", y = \"RRi (milliseconds)\") +   # Use a clean minimal theme   theme_minimal() set.seed(123) # Set the random number generator seed for reproducibility  # Add normally distributed random noise to the theoretical RRi signal. # sd=50 introduces realistic variability around the true curve. RRi_simulated <- RRi_theoretical + rnorm(length(time), mean = 0, sd = 50) ggplot() +   # Plot the noisy simulated RRi signal   geom_line(aes(time, RRi_simulated), linewidth = 1/4, col = \"purple\") +   # Add vertical lines to demarcate phases (centered around tau=6 and tau+delta=9)   geom_vline(xintercept = c(6, 9), linetype = \"dashed\", col = \"gray50\") +   # Add text labels for the phases   annotate(\"text\", x = 5.6, y = 500, label = \"Rest\", col = \"gray50\", hjust = 1, size = 3) +   annotate(\"text\", x = 7.5, y = 800, label = \"Exercise\", col = \"gray50\", hjust = 0.5, size = 3) +   annotate(\"text\", x = 9.4, y = 500, label = \"Recovery\", col = \"gray50\", hjust = 0, size = 3) +   # Add labels and title   labs(title = \"Simulated Dual-Logistic RRi Signal with Added Noise\",        subtitle = \"Gaussian noise (sd=50) added to the theoretical curve\",        x = \"Time (minutes)\", y = \"RRi (milliseconds)\") +   theme_minimal() set.seed(1234) # Use a different seed for this random process  # Determine the total number of data points n_samples <- length(time)  # Randomly select indices for 5% of the samples to become 'ectopics' ectopic_indices <- sample.int(n = n_samples, size = floor(n_samples * 0.05))  # Modify the RRi values at these indices by multiplying by either 0.3 or 1.7 # This creates artificially large deviations from the surrounding signal. RRi_simulated[ectopic_indices] <- RRi_simulated[ectopic_indices] * sample(c(0.3, 1.7), size = length(ectopic_indices), replace = TRUE) ggplot() +   # Plot the noisy signal now including ectopic beats   geom_line(aes(time, RRi_simulated), linewidth = 1/4, col = \"purple\") +   # Add phase demarcation lines and labels again   geom_vline(xintercept = c(6, 9), linetype = \"dashed\", col = \"gray50\") +   annotate(\"text\", x = 5.6, y = 500, label = \"Rest\", col = \"gray50\", hjust = 1, size = 3) +   annotate(\"text\", x = 7.5, y = 800, label = \"Exercise\", col = \"gray50\", hjust = 0.5, size = 3) +   annotate(\"text\", x = 9.4, y = 500, label = \"Recovery\", col = \"gray50\", hjust = 0, size = 3) +   # Add labels and title   labs(title = \"Simulated RRi Signal with Noise and Ectopic Beats\",        subtitle = \"Represents typical challenging 'raw' data\",        x = \"Time (minutes)\", y = \"RRi (milliseconds)\") +   theme_minimal()"},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"step-1-cleaning-the-rri-data","dir":"","previous_headings":"Comprehensive Example Workflow: From Simulation to Estimation","what":"Step 1: Cleaning the RRi Data","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"First, address ectopic beats using clean_outlier() function. function identify replace artificially large deviations introduced. Let’s visualize effect cleaning. overlay cleaned signal (blue) original messy signal (purple).  see large spikes (ectopics) present purple line smoothed blue line, now follows general trend closely. Next, apply low-pass filter using filter_signal() remove remaining high-frequency Gaussian noise.  (Aside: , used low-pass filter W = 0.2 visualization purposes. However, configuration might filtering much physiological signal. dafault, filter_signal() function uses W = 0.5, might better use cases preserves physiologically relevant fluctuations.) blue line now appear much smoother purple line, representing best estimate underlying physiological trend removing ectopic beats random noise. Note filtered signal might slightly shorter ends trimming applied filter_signal().","code":"# Apply the outlier cleaning function to the simulated RRi data # Using default settings for LOESS span, threshold, and replacement method. RRi_cleaned <- clean_outlier(RRi_simulated) ggplot() +   # Plot the original signal (with ectopics) faintly in purple   geom_line(aes(time, RRi_simulated), linewidth = 1/4, col = \"purple\", alpha = 0.5) +   # Plot the cleaned signal (ectopics replaced) in blue   geom_line(aes(time, RRi_cleaned), linewidth = 1/4, col = \"blue\") +   # Add labels and title   labs(title = \"Effect of Outlier Cleaning\",        subtitle = \"Original Signal (Purple) vs. Cleaned Signal (Blue)\",        x = \"Time (minutes)\", y = \"RRi (milliseconds)\") +   theme_minimal() # Apply the zero-phase Butterworth low-pass filter to the cleaned signal # This will smooth out the rapid fluctuations. Custom settings used to # highlight the filtering capabilities only. RRi_filtered <- filter_signal(RRi_cleaned, W = 0.2)  # Visualize the cleaned signal vs the filtered signal ggplot() +   # Plot the cleaned signal (ectopics removed but still noisy) in purple   geom_line(aes(time, RRi_cleaned), linewidth = 1/4, col = \"purple\", alpha = 0.5) +   # Plot the filtered signal (smoothed) in blue. na.rm=TRUE handles potential NAs from trimming.   geom_line(aes(time, RRi_filtered), linewidth = 1/2, col = \"blue\", na.rm = TRUE) +   # Add labels and title   labs(title = \"Effect of Low-Pass Filtering\",        subtitle = \"Cleaned Signal (Purple) vs. Filtered Signal (Blue)\",        x = \"Time (minutes)\", y = \"RRi (milliseconds)\") +   theme_minimal()"},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"step-2-estimating-the-rri-model-parameters","dir":"","previous_headings":"Comprehensive Example Workflow: From Simulation to Estimation","what":"Step 2: Estimating the RRi Model Parameters","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"pre-processed (cleaned filtered) RRi signal, can finally estimate parameters dual-logistic model using estimate_RRi_curve(). output shows parameter values (α,β,λ,τ,c,ϕ,δ\\alpha, \\beta, \\lambda, \\tau, c, \\phi, \\delta) estimated model noisy, artifact-laden simulated data. Compare estimated values true_params used initially (alpha = 800, beta = -375, etc.). reasonably close, demonstrating model’s ability recover original parameters despite extreme outliers noisy signal. can get detailed statistics fit using summary() function. summary typically includes goodness--fit metrics: R-squared (R²): Indicates proportion variance filtered RRi data explained fitted model. value 0.966 means ~96.6% variance captured, quite good considering noise added. RMSE (Root Mean Squared Error): Represents typical magnitude error (residuals) model’s predictions actual filtered data, original units (ms). RMSE ~20 ms reported . MAPE (Mean Absolute Percentage Error): Expresses average error percentage actual RRi values. MAPE 2.2% indicates average prediction error 2.2% RRi value. Visual diagnostics also crucial. use specialized plot() method fitted model object.  Examine plots carefully: Fitted Line vs. Data: top plot shows filtered RRi signal (purple) overlaid smooth predicted curve estimated model (blue). blue line closely follow central trend purple line. Residuals vs. Time: middle plot shows residuals (filtered RRi - predicted RRi) plotted time. Ideally, residuals randomly scattered around horizontal zero line, discernible patterns (like curves, trends, funnel shapes). indicates model captured systematic variation, leaving random noise. Histogram Residuals: bottom plot shows distribution residuals. well-behaved fits (especially underlying noise normal), histogram look roughly symmetric bell-shaped, centered around zero. diagnostics suggest model fits processed data well.","code":"# Fit the dual-logistic model to the filtered time and RRi data. # The function performs the robust optimization to find the best parameters. #  # Note: We must provide the 'time' vector that corresponds to the potentially trimmed 'RRi_filtered'.  # Pass filtered RRi and corresponding time fit_summary <- estimate_RRi_curve(time, RRi_filtered)  # Print the primary results, focusing on the estimated parameters. print(fit_summary) #> RRi_fit Object #> Optimization Method: L-BFGS-B  #> Estimated Parameters: #>        alpha         beta            c       lambda          phi          tau  #>  802.7038430 -379.1634841    0.8498156   -2.8539406   -1.9124351    6.0018920  #>        delta  #>    3.0004803  #> Objective Value (Huber loss): 357551.5  #> Convergence Code: 0 # Obtain a more comprehensive summary of the model fit. summary(fit_summary) #> Summary of RRi_fit Object #> Optimization Method: L-BFGS-B  #> Estimated Parameters: #>        alpha         beta            c       lambda          phi          tau  #>  802.7038430 -379.1634841    0.8498156   -2.8539406   -1.9124351    6.0018920  #>        delta  #>    3.0004803  #>  #> Objective Value (Huber loss): 357551.5  #> Residual Sum of Squares (RSS): 716606.3  #> Total Sum of Squares (TSS): 21436042  #> R-squared: 0.9666  #> Root Mean Squared Error (RMSE): 19  ms  #> Mean Absolute Percentage Error (MAPE): 2.2  %  #> Number of observations: 1991  #> Convergence Code: 0 # Generate diagnostic plots for the fitted model. plot(fit_summary)"},{"path":"https://matcasti.github.io/CardioCurveR/index.html","id":"step-3-comparing-estimated-vs-true-model","dir":"","previous_headings":"Comprehensive Example Workflow: From Simulation to Estimation","what":"Step 3: Comparing Estimated vs. True Model","title":"Nonlinear Modeling of R-R Interval Dynamics","text":"Finally, ultimate test simulation study compare curve generated estimated parameters directly true theoretical curve started adding noise artifacts.  can observe plot, dashed blue line (estimated model) closely overlays solid purple line (true underlying process). visually confirms CardioCurveR workflow, including robust cleaning, filtering, parameter estimation, successful reverse-engineering fundamental physiological dynamics even significantly corrupted signal. comprehensive example walked simulating realistic RRi data, applying essential pre-processing steps (clean_outlier, filter_signal), estimating core physiological parameters using robust estimate_RRi_curve function, evaluating fit statistically visually. successful recovery underlying theoretical curve highlights power utility CardioCurveR analyzing complex RRi dynamics. encourage experiment workflow, perhaps modifying noise levels, number ectopic beats, even true parameters, explore capabilities robustness modeling RR interval dynamics CardioCurveR! basic introductory guide, go check Get Started article, cover workflow minimal additional code, best newcomers beginners. Enjoy analyses!","code":"# Calculate the RRi curve predicted by the *estimated* parameters RRi_estimated <- dual_logistic(time, fit_summary$parameters)  # Plot the original theoretical curve (purple) and the estimated curve (blue) together ggplot() +   # Plot the true theoretical curve   geom_line(aes(time, RRi_theoretical), linewidth = 1.0, col = \"purple\", linetype = \"solid\") +   # Plot the curve generated from the estimated parameters   geom_line(aes(time, RRi_estimated), linewidth = 1.0, col = \"blue\", linetype = \"dashed\") +   # Add labels and title for comparison   labs(title = \"Comparison: True vs. Estimated RRi Model Curves\",        subtitle = \"True Underlying Curve (Purple) vs. Model Estimated from Noisy Data (Blue)\",        y = \"RRi (milliseconds)\", x = \"Time (minutes)\") +   theme_minimal()"},{"path":"https://matcasti.github.io/CardioCurveR/reference/CardioCurveR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CardioCurveR: Nonlinear Modeling of R-R Interval Dynamics — CardioCurveR-package","title":"CardioCurveR: Nonlinear Modeling of R-R Interval Dynamics — CardioCurveR-package","text":"Automated robust framework analyzing R-R interval (RRi) signals using advanced nonlinear modeling preprocessing techniques. package implements dual-logistic model capture rapid drop subsequent recovery RRi exercise, described Castillo-Aguilar et al. (2025) doi:10.1038/s41598-025-93654-6 . addition, 'CardioCurveR' includes tools filtering RRi signals using zero-phase Butterworth low-pass filtering cleaning ectopic beats via adaptive outlier replacement using local regression robust statistics. integrated methods preserve dynamic features RRi signals facilitate accurate cardiovascular monitoring clinical research.","code":""},{"path":[]},{"path":"https://matcasti.github.io/CardioCurveR/reference/CardioCurveR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CardioCurveR: Nonlinear Modeling of R-R Interval Dynamics — CardioCurveR-package","text":"Maintainer: Matías Castillo-Aguilar m99castillo@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/CardioCurveR.html","id":null,"dir":"Reference","previous_headings":"","what":"CardioCurveR: Nonlinear Modeling and Preprocessing of R-R Interval Dynamics — CardioCurveR","title":"CardioCurveR: Nonlinear Modeling and Preprocessing of R-R Interval Dynamics — CardioCurveR","text":"CardioCurveR provides automated robust framework analyzing R-R interval (RRi) signals using advanced nonlinear modeling preprocessing techniques. package implements dual-logistic model capture rapid drop RRi exercise subsequent recovery phase, following methodology described Castillo-Aguilar et al. (2025):","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/CardioCurveR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CardioCurveR: Nonlinear Modeling and Preprocessing of R-R Interval Dynamics — CardioCurveR","text":"$$ RRi(t) = \\alpha + \\frac{\\beta}{1 + e^{\\lambda (t-\\tau)}} + \\frac{-c \\cdot \\beta}{1 + e^{\\phi (t-\\tau-\\delta)}} $$ model, \\(\\alpha\\) denotes baseline RRi, \\(\\beta\\) controls amplitude drop, \\(\\lambda\\) \\(\\tau\\) modulate drop phase, \\(c\\), \\(\\phi\\), \\(\\delta\\) govern recovery dynamics. addition parameter estimation, CardioCurveR offers state---art signal preprocessing tools: CardioCurveR cleans RRi signals applying zero-phase Butterworth low-pass filtering remove high-frequency noise preserving signal phase. employs adaptive outlier replacement, using local regression (LOESS) robust statistics, identify correct ectopic beats without \"chopping\" dynamic signal features. methods ensure intrinsic dynamics RRi signals maintained, supporting accurate cardiovascular monitoring facilitating clinical research.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/boot_RRi_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap RRi Model Parameter Estimates — boot_RRi_parameters","title":"Bootstrap RRi Model Parameter Estimates — boot_RRi_parameters","text":"function performs bootstrap procedure fitted RRi model (produced estimate_RRi_curve()) assess uncertainty parameter estimates. resamples original data (using either specified number samples proportion available data) re-estimates dual-logistic model parameters bootstrap sample. approach leverages speed efficiency data.table package.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/boot_RRi_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap RRi Model Parameter Estimates — boot_RRi_parameters","text":"","code":"boot_RRi_parameters(   fit = NULL,   n_samples = nrow(fit$data),   prop_of_samples = NULL,   nboot = 100 )"},{"path":"https://matcasti.github.io/CardioCurveR/reference/boot_RRi_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap RRi Model Parameter Estimates — boot_RRi_parameters","text":"fit object class \"RRi_fit\" produced estimate_RRi_curve(). fitted object must contain data component original time RRi values well fitted values. n_samples numeric value specifying number data points sample bootstrap replicate. default nrow(fit$data) (data points). Must exceed total number rows data. prop_of_samples numeric value (0 1) specifying proportion data use bootstrap sample. specified, overrides n_samples computing number floor(nrow(fit$data) * prop_of_samples). nboot numeric value indicating number bootstrap replicates perform. default 100.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/boot_RRi_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap RRi Model Parameter Estimates — boot_RRi_parameters","text":"object class \"boot_RRi_fit\", data.table one row per bootstrap replicate. row contains estimated parameters bootstrap sample.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/boot_RRi_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap RRi Model Parameter Estimates — boot_RRi_parameters","text":"bootstrap procedure returns data.table row bootstrap replicate, containing estimated parameters. enables users construct confidence intervals assess variability fitted model parameters. function first checks input fit object NULL n_samples nboot numeric valid. prop_of_samples provided, used compute number samples per replicate. data fit object converted data.table efficient subsetting. Bootstrap indices generated sampling replacement, bootstrap replicate, function re-estimates model parameters using estimate_RRi_curve(). output data.table row corresponds bootstrap replicate.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/boot_RRi_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap RRi Model Parameter Estimates — boot_RRi_parameters","text":"","code":"# \\donttest{ library(CardioCurveR) library(data.table)  # Simulate an example RRi signal: set.seed(123) t <- seq(0, 20, by = 0.01) true_params <- c(alpha = 800, beta = -350, c = 0.80,                  lambda = -3, phi = -2, tau = 6, delta = 3) RRi_true <- dual_logistic(t, true_params) RRi_sim <- RRi_true + rnorm(n = length(t), sd = 30)  # Estimate the model parameters: fit <- estimate_RRi_curve(time = t, RRi = RRi_sim)  # Bootstrap the parameter estimates using 50% of the data per replicate and 100 replicates boot_fit <- boot_RRi_parameters(fit = fit, prop_of_samples = 0.5, nboot = 100)  # View the bootstrap estimates print(boot_fit) #> Bootstrap RRi Parameter Estimates #> Number of bootstrap replicates: 100  #> Preview of estimated parameters (first 6 replicates): #>   nboot    alpha      beta         c    lambda       phi      tau    delta #> 1     1 800.5251 -353.5449 0.8870946 -3.062566 -1.622490 5.968664 3.120885 #> 2     2 800.4201 -339.0531 0.7224601 -3.243566 -2.183843 5.952733 2.974459 #> 3     3 800.4500 -346.2715 0.7425458 -3.314643 -2.128720 5.971596 2.973739 #> 4     4 799.3835 -337.8819 0.6500205 -3.020092 -2.984357 5.951567 2.904101 #> 5     5 801.1221 -347.4734 0.7006175 -3.203447 -2.364417 5.969239 2.886365 #> 6     6 803.9053 -346.8873 0.7399056 -3.253758 -2.202961 5.961412 2.990922 # }"},{"path":"https://matcasti.github.io/CardioCurveR/reference/clean_outlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean RR-Interval Signal Using Local Smoothing and Adaptive Outlier Replacement — clean_outlier","title":"Clean RR-Interval Signal Using Local Smoothing and Adaptive Outlier Replacement — clean_outlier","text":"function cleans RR-interval (RRi) signal identifying ectopic noisy beats using robust, locally adaptive approach. context cardiovascular monitoring (applying Castillo-Aguilar et al. (2025) non-linear model), function first fits local regression (LOESS) RRi signal, computes residuals, identifies ectopic beats residuals exceeding multiple median absolute deviation.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/clean_outlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean RR-Interval Signal Using Local Smoothing and Adaptive Outlier Replacement — clean_outlier","text":"","code":"clean_outlier(   signal,   loess_span = 0.25,   threshold = 2,   replace = c(\"gaussian\", \"uniform\", \"loess\"),   seed = 123 )"},{"path":"https://matcasti.github.io/CardioCurveR/reference/clean_outlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean RR-Interval Signal Using Local Smoothing and Adaptive Outlier Replacement — clean_outlier","text":"signal numeric vector RR interval (RRi) values. loess_span numeric value controlling span LOESS fit (default 0.25). Smaller values yield local fit. threshold numeric multiplier (default 2) median absolute deviation (MAD) determine cutoff flagging ectopic beats. replace character string specifying replacement method ectopic beats. Must one \"gaussian\", \"uniform\", \"loess\" (default \"gaussian\"). seed integer set random seed reproducibility replacement process (default 123).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/clean_outlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean RR-Interval Signal Using Local Smoothing and Adaptive Outlier Replacement — clean_outlier","text":"numeric vector containing cleaned RRi signal.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/clean_outlier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean RR-Interval Signal Using Local Smoothing and Adaptive Outlier Replacement — clean_outlier","text":"function offers several replacement strategies outliers: \"gaussian\" Replace ectopic values random draws normal distribution, centered LOESS-predicted value standard deviation equal robust MAD. \"uniform\" Replace ectopic values random draws uniform distribution, bounded LOESS-predicted value ± MAD. \"loess\" Simply replace ectopic values LOESS-predicted values. adaptive approach ensures dynamic changes RRi signal, observed exercise, preserved, ectopic spurious beats corrected without \"chopping\" data.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/clean_outlier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean RR-Interval Signal Using Local Smoothing and Adaptive Outlier Replacement — clean_outlier","text":"","code":"# Simulate an RRi signal with dynamic behavior and ectopic beats: n <- 1000  time_vec <- seq(0, 20, length.out = n)  set.seed(123)  signal <- 1000 -   400 / (1 + exp(-3 * (time_vec - 6))) +   300 / (1 + exp(-2 * (time_vec - 10))) + rnorm(n, sd = 50)  # Introduce ectopic beats (5% of total signal) noise_points <- sample.int(n, floor(n * 0.05))  signal[noise_points] <- signal[noise_points] * runif(25, 0.25, 2.00)  # Clean the signal using the default Gaussian replacement strategy clean_signal <- clean_outlier(signal = signal,                          loess_span = 0.25, threshold = 2,                          replace = \"gaussian\", seed = 123)  # Plot the signal vs cleaned signal library(ggplot2)  ggplot() + geom_line(aes(time_vec, signal), linewidth = 1/4, col = \"purple\") + geom_line(aes(time_vec, clean_signal), linewidth = 1/4, col = \"blue\") + labs(x = \"Time (min)\", y = \"RRi (ms)\",      title = \"Original (Purple) vs Cleaned signal (Blue)\") + theme_minimal()"},{"path":"https://matcasti.github.io/CardioCurveR/reference/dual_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — dual_logistic","title":"Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — dual_logistic","text":"function implements dual-logistic model capture dynamic behavior RR intervals (RRi) exercise recovery, described Castillo-Aguilar et al. (2025). model designed account rapid drop subsequent recovery RRi values combining two logistic functions. formulation allows robust characterization non-linear fluctuations RRi signals, critical accurate cardiovascular monitoring analysis.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/dual_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — dual_logistic","text":"","code":"dual_logistic(t, params)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/dual_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — dual_logistic","text":"t numeric vector time points. params named numeric vector parameters, must include: alpha baseline RRi level. beta amplitude parameter drop phase. lambda rate parameter controlling steepness drop. tau time center drop phase. c scaling factor recovery phase. phi rate parameter controlling steepness recovery. delta time offset recovery phase relative tau.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/dual_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — dual_logistic","text":"numeric vector containing modeled RRi values times specified t.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/dual_logistic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — dual_logistic","text":"model defined : $$ RRi(t) = \\alpha + \\frac{\\beta}{1 + e^{\\lambda (t - \\tau)}} + \\frac{-c \\cdot \\beta}{1 + e^{\\phi (t - \\tau - \\delta)}} $$ : \\(\\alpha\\) baseline RRi level. \\(\\beta\\) controls amplitude drop phase. \\(\\lambda\\) controls steepness drop phase. \\(\\tau\\) defines time drop centered. \\(c\\) scales amplitude recovery phase relative \\(\\beta\\). \\(\\phi\\) controls steepness recovery phase. \\(\\delta\\) shifts recovery phase time relative drop phase. dual-logistic model defined following approach described Castillo-Aguilar et al. (2025), specifically tailored RRi signal analysis contexts exercise-induced changes recovery dynamics interest. model combines two logistic functions, one representing drop RRi one representing recovery, allowing accurate fit even presence non-linear fluctuations. Attribution Castillo-Aguilar et al. (2025) provided recognize original methodology inspired implementation.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/dual_logistic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — dual_logistic","text":"Castillo-Aguilar, et al. (2025). Enhancing Cardiovascular Monitoring: Non-linear Model Characterizing RR Interval Fluctuations Exercise Recovery. Scientific Reports, 15(1), 8628.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/dual_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — dual_logistic","text":"","code":"# Define example parameters based on Castillo-Aguilar et al. (2025) params <- list(alpha = 1000, beta = -380, lambda = -3, tau = 6,             c = 0.85, phi = -2, delta = 3)  # Simulate a time vector t <- seq(0, 20, length.out = 150)  # Compute the dual-logistic model values RRi_model <- dual_logistic(t, params)  # Plot the resulting model library(ggplot2)  ggplot() + geom_line(aes(t, RRi_model), linewidth = 1, col = \"purple\") +   labs(x = \"Time (min)\", y = \"RRi (ms)\",        title = \"Dual-Logistic RRi Model\",        caption = \"Castillo-Aguilar et al. (2025)\") +   theme_minimal()"},{"path":"https://matcasti.github.io/CardioCurveR/reference/estimate_RRi_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate RRi Curve Using a Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — estimate_RRi_curve","title":"Estimate RRi Curve Using a Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — estimate_RRi_curve","text":"function estimates parameters dual-logistic model applied RR interval (RRi) signals. model designed capture rapid drop subsequent recovery RRi values exercise recovery periods, described Castillo-Aguilar et al. (2025). robust Huber loss function (default \\(\\delta\\) 50 ms) used downweight influence outliers, ensuring optimization process robust even presence noisy ectopic beats.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/estimate_RRi_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate RRi Curve Using a Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — estimate_RRi_curve","text":"","code":"estimate_RRi_curve(   time,   RRi,   start_params = c(alpha = 800, beta = -380, c = 0.85, lambda = -3, phi = -2, tau = 6,     delta = 3),   lower_lim = c(alpha = 300, beta = -750, c = 0.1, lambda = -10, phi = -10, tau =     min(time), delta = min(time)),   upper_lim = c(alpha = 2000, beta = -10, c = 2, lambda = -0.1, phi = -0.1, tau =     max(time), delta = max(time)),   method = \"L-BFGS-B\" )"},{"path":"https://matcasti.github.io/CardioCurveR/reference/estimate_RRi_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate RRi Curve Using a Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — estimate_RRi_curve","text":"time numeric vector time points. RRi numeric vector RR interval values. start_params named numeric vector list initial parameter estimates. Default c(alpha = 800, beta = -380, c = 0.85, lambda = -3, phi = -2, tau = 6, delta = 3). lower_lim named numeric vector specifying lower bound parameter. Default c(alpha = 300, beta = -750, c = 0.1, lambda = -10, phi = -10, tau = min(time), delta = min(time)). upper_lim named numeric vector specifying upper bound parameter. Default c(alpha = 2000, beta = -10, c = 2.0, lambda = -0.1, phi = -0.1, tau = max(time), delta = max(time)). method character string specifying optimization method use optim(). default \"L-BFGS-B\", allows parameter constraints.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/estimate_RRi_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate RRi Curve Using a Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — estimate_RRi_curve","text":"list containing: data data frame columns time, original RRi values, fitted values obtained dual-logistic model. method optimization method used. parameters estimated parameters model. objective_value final value objective (Huber loss) function. convergence integer code indicating convergence (0 indicates success).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/estimate_RRi_curve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate RRi Curve Using a Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — estimate_RRi_curve","text":"dual-logistic model, described Castillo-Aguilar et al. (2025), defined : $$ RRi(t) = \\alpha + \\frac{\\beta}{1 + e^{\\lambda (t - \\tau)}} + \\frac{-c \\cdot \\beta}{1 + e^{\\phi (t - \\tau - \\delta)}} $$ : \\(\\alpha\\) baseline RRi level. \\(\\beta\\) controls amplitude drop. \\(\\lambda\\) modulates steepness drop phase. \\(\\tau\\) represents time drop centered. \\(c\\) scales amplitude recovery relative \\(\\beta\\). \\(\\phi\\) controls steepness recovery phase. \\(\\delta\\) shifts recovery phase time relative \\(\\tau\\). function first removes missing cases input data defines dual-logistic model, represents dynamic behavior RR intervals exercise recovery. objective function based Huber loss (default threshold 50 ms), provides robustness outliers penalizing large deviations less harshly standard squared error. objective function quantifies discrepancy observed RRi values predicted model. Parameter optimization performed using optim() box constraints \"L-BFGS-B\" method used. constraints ensure parameters remain within physiologically plausible ranges. optimization methods, bounds ignored setting lower limit -Inf upper limit Inf. important note default starting parameters bounds provided function general guidelines may optimal every dataset experimental scenario. Users encouraged customize starting parameters (start_params) , necessary, lower upper bounds (lower_lim upper_lim) based specific characteristics RRi signal. customization crucial achieving robust convergence accurate parameter estimates diverse applications.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/estimate_RRi_curve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate RRi Curve Using a Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — estimate_RRi_curve","text":"Castillo-Aguilar, et al. (2025). Enhancing Cardiovascular Monitoring: Non-linear Model Characterizing RR Interval Fluctuations Exercise Recovery. Scientific Reports, 15(1), 8628.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/estimate_RRi_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate RRi Curve Using a Dual-Logistic Model for RR Interval Dynamics (Castillo-Aguilar et al.) — estimate_RRi_curve","text":"","code":"true_params <- c(alpha = 800, beta = -300, c = 0.80,                  lambda = -3, phi = -1, tau = 6, delta = 3)  time_vec <- seq(0, 20, by = 0.01)  set.seed(1234)  # Simulate an example RRi signal: RRi_simulated <- dual_logistic(time_vec, true_params) +                   rnorm(length(time_vec), sd = 30)  # Estimate the model parameters: fit <- estimate_RRi_curve(time = time_vec, RRi = RRi_simulated)  # Print method print(fit) #> RRi_fit Object #> Optimization Method: L-BFGS-B  #> Estimated Parameters: #>        alpha         beta            c       lambda          phi          tau  #>  800.0103101 -295.1123155    0.7991941   -3.0636912   -1.0268231    5.9785596  #>        delta  #>    3.1004798  #> Objective Value (Huber loss): 852819.5  #> Convergence Code: 0   # Summary method summary(fit) #> Summary of RRi_fit Object #> Optimization Method: L-BFGS-B  #> Estimated Parameters: #>        alpha         beta            c       lambda          phi          tau  #>  800.0103101 -295.1123155    0.7991941   -3.0636912   -1.0268231    5.9785596  #>        delta  #>    3.1004798  #>  #> Objective Value (Huber loss): 852819.5  #> Residual Sum of Squares (RSS): 1758802  #> Total Sum of Squares (TSS): 12795299  #> R-squared: 0.8625  #> Root Mean Squared Error (RMSE): 29.6  ms  #> Mean Absolute Percentage Error (MAPE): 3.3  %  #> Number of observations: 2001  #> Convergence Code: 0   # Plot method plot(fit)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/filter_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Low-Pass Filter for RR Interval Signals with Edge Trimming — filter_signal","title":"Low-Pass Filter for RR Interval Signals with Edge Trimming — filter_signal","text":"function cleans RR interval (RRi) signal applying Butterworth low-pass filter using zero-phase filtering (via filtfilt signal package) trimming edges filtered signal remove potential artifacts. approach particularly useful preprocessing RRi data context cardiovascular monitoring non-linear modeling (see Castillo-Aguilar et al. 2025).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/filter_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low-Pass Filter for RR Interval Signals with Edge Trimming — filter_signal","text":"","code":"filter_signal(x, n = 3, W = 0.5, abs = 5)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/filter_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low-Pass Filter for RR Interval Signals with Edge Trimming — filter_signal","text":"x numeric vector representing RRi signal filtered. n integer specifying filter order Butterworth filter. Default 3. W numeric value (0 1) specifying normalized critical frequency low-pass filter. Default 0.5. abs integer indicating number samples beginning end filtered signal trimmed (set NA) remove edge artifacts. Default 5.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/filter_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low-Pass Filter for RR Interval Signals with Edge Trimming — filter_signal","text":"numeric vector length x containing denoised RRi signal, first last abs values set NA.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/filter_signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Low-Pass Filter for RR Interval Signals with Edge Trimming — filter_signal","text":"filtering step performed Butterworth filter order n critical frequency W, W normalized relative Nyquist frequency (.e. value 0 1). avoid edge artifacts produced filtering, function sets first last abs samples NA. function part CardioCurveR package, designed facilitate robust analysis RR interval fluctuations. Filtering performed using zero-phase forward reverse digital filter (filtfilt) ensure phase signal preserved. trim sub-function sets first last abs samples NA mitigate impact filter transients. steps crucial preparing RRi signals non-linear modeling, dual-logistic model described Castillo-Aguilar et al. (2025).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/filter_signal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Low-Pass Filter for RR Interval Signals with Edge Trimming — filter_signal","text":"Castillo-Aguilar, et al. (2025). Enhancing Cardiovascular Monitoring: Non-linear Model Characterizing RR Interval Fluctuations Exercise Recovery. Scientific Reports, 15(1), 8628.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/filter_signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low-Pass Filter for RR Interval Signals with Edge Trimming — filter_signal","text":"","code":"# Example: Simulate a noisy RRi signal time <- seq(0, 60, length.out = 150)  set.seed(123)  # Simulated RRi signal (in ms) with added noise RRi <- 1000 + sin(seq(0, 2*pi, length.out = 150)) * 50 + rnorm(150, sd = 10)  # Clean the signal using the default settings RRi_clean <- filter_signal(x = RRi, n = 3, W = 0.5, abs = 5)  # Plot the original and filtered signals library(ggplot2)  ggplot() + geom_line(aes(time, RRi), linewidth = 1/2, col = \"gray\") + geom_line(aes(time, RRi_clean), linewidth = 1/2, col = \"purple\", na.rm = TRUE) + labs(x = \"Time (s)\", y = \"RRi (ms)\",      title = \"Original (Gray) vs Filtered Signal (Purple)\") + theme_minimal()"},{"path":"https://matcasti.github.io/CardioCurveR/reference/import_RRi_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Import RRi Signal from a TXT File and Preprocess It — import_RRi_txt","title":"Import RRi Signal from a TXT File and Preprocess It — import_RRi_txt","text":"function imports RR interval (RRi) signal plain text file, line contains one numeric RR interval (milliseconds). imported signal preprocessed replacing non-realistic values (min max) NA removing . Optionally, function can remove ectopic beats using clean_outlier() function, can filter signal using filter_signal(). time variable computed cumulative sum RR intervals (converted minutes), processed data returned data frame.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/import_RRi_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import RRi Signal from a TXT File and Preprocess It — import_RRi_txt","text":"","code":"import_RRi_txt(   file = NULL,   remove_ectopic = TRUE,   filter_noise = FALSE,   min = 250,   max = 2000,   ... )"},{"path":"https://matcasti.github.io/CardioCurveR/reference/import_RRi_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import RRi Signal from a TXT File and Preprocess It — import_RRi_txt","text":"file character string specifying path text file containing RRi signal. remove_ectopic logical value indicating whether remove ectopic beats using clean_outlier() function. Default TRUE. filter_noise logical value indicating whether apply low-pass filter using filter_signal() imported signal. Default FALSE. min numeric value specifying minimum realistic RRi value (milliseconds). Values set NA. Default 250. max numeric value specifying maximum realistic RRi value (milliseconds). Values set NA. Default 2000. ... Additional arguments passed readLines().","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/import_RRi_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import RRi Signal from a TXT File and Preprocess It — import_RRi_txt","text":"data frame two columns: time RRi. time column computed cumulative sum RRi values divided 60000 (convert minutes), RRi contains cleaned signal.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/import_RRi_txt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import RRi Signal from a TXT File and Preprocess It — import_RRi_txt","text":"expected data format text file one RR interval per line, example: function begins checking input file provided options remove_ectopic filter_noise logical values length 1. reads file using readLines(), converts readings doubles, replaces values outside realistic range (defined min max) NA. removing missing values, function optionally cleans signal remove ectopic beats applies Butterworth low-pass filter requested. Finally, computes time vector based cumulative sum cleaned RRi signal returns result data frame.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/import_RRi_txt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import RRi Signal from a TXT File and Preprocess It — import_RRi_txt","text":"","code":"temp_file <- tempfile(fileext = \".txt\")  cat(sim_RRi$RRi_simulated,     file = temp_file,     sep = \"\\n\")  sim_data <- import_RRi_txt(file = temp_file,                            remove_ectopic = TRUE,                            filter_noise = FALSE,                            min = 250, max = 2000)  head(sim_data) #>         time      RRi #> 1 0.01312123 787.2738 #> 2 0.02625456 788.0000 #> 3 0.04088790 878.0000 #> 4 0.05428790 804.0000 #> 5 0.06772123 806.0000 #> 6 0.08248790 886.0000  library(ggplot2)  ggplot(sim_data, aes(time, RRi)) +   geom_line(linewidth = 1/4, col = \"purple\") +   labs(x = \"Time (min)\", y = \"RRi (ms)\",        title = \"Processed RRi Signal\") +   theme_minimal()"},{"path":"https://matcasti.github.io/CardioCurveR/reference/plot.RRi_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for RRi_fit objects — plot.RRi_fit","title":"Plot method for RRi_fit objects — plot.RRi_fit","text":"Produces panel diagnostic plots fitted dual-logistic model. output includes plot observed RRi signal fitted curve overlay, residuals versus time plot, histogram residuals.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/plot.RRi_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for RRi_fit objects — plot.RRi_fit","text":"","code":"# S3 method for class 'RRi_fit' plot(x, ...)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/plot.RRi_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for RRi_fit objects — plot.RRi_fit","text":"x object class \"RRi_fit\". ... Additional arguments (unused).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/plot.RRi_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for RRi_fit objects — plot.RRi_fit","text":"ggplot object panel diagnostic plots fitted dual-logistic model.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/plot.boot_RRi_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for boot_RRi_fit objects — plot.boot_RRi_fit","title":"Plot method for boot_RRi_fit objects — plot.boot_RRi_fit","text":"Generates panel density plots visualize bootstrap distributions RRi model parameters. method converts bootstrap results long format creates one density plot per parameter.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/plot.boot_RRi_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for boot_RRi_fit objects — plot.boot_RRi_fit","text":"","code":"# S3 method for class 'boot_RRi_fit' plot(x, ...)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/plot.boot_RRi_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for boot_RRi_fit objects — plot.boot_RRi_fit","text":"x object class \"boot_RRi_fit\". ... Additional arguments (unused).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/plot.boot_RRi_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for boot_RRi_fit objects — plot.boot_RRi_fit","text":"ggplot object panel density plots visualize bootstrap distributions RRi model parameters.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.RRi_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for RRi_fit objects — print.RRi_fit","title":"Print method for RRi_fit objects — print.RRi_fit","text":"Displays concise summary RRi_fit object produced estimate_RRi_curve(). printed output includes optimization method, estimated parameters, final objective value, convergence code.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.RRi_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for RRi_fit objects — print.RRi_fit","text":"","code":"# S3 method for class 'RRi_fit' print(x, ...)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.RRi_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for RRi_fit objects — print.RRi_fit","text":"x object class \"RRi_fit\". ... Additional arguments passed print.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.RRi_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for RRi_fit objects — print.RRi_fit","text":"message (class NULL) optimization method used, estimated parameters, objective value Hubber loss algorithm convergence code optimization method.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.boot_RRi_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for boot_RRi_fit objects — print.boot_RRi_fit","title":"Print method for boot_RRi_fit objects — print.boot_RRi_fit","text":"Displays concise summary bootstrap RRi model parameter estimates. printed output shows number bootstrap replicates preview parameter estimates first replicates.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.boot_RRi_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for boot_RRi_fit objects — print.boot_RRi_fit","text":"","code":"# S3 method for class 'boot_RRi_fit' print(x, ...)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.boot_RRi_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for boot_RRi_fit objects — print.boot_RRi_fit","text":"x object class \"boot_RRi_fit\". ... Additional arguments passed print.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.boot_RRi_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for boot_RRi_fit objects — print.boot_RRi_fit","text":"message (class NULL) number bootstrap replicates preview  first 6 bootstrap samples. Additionally, returns input object invisibly.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.summary.RRi_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of RRi_fit objects — print.summary.RRi_fit","title":"Print summary of RRi_fit objects — print.summary.RRi_fit","text":"Print summary RRi_fit objects","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.summary.RRi_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of RRi_fit objects — print.summary.RRi_fit","text":"","code":"# S3 method for class 'summary.RRi_fit' print(x, ...)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.summary.RRi_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of RRi_fit objects — print.summary.RRi_fit","text":"x object class \"summary.RRi_fit\". ... Additional arguments.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.summary.RRi_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of RRi_fit objects — print.summary.RRi_fit","text":"message (class NULL) optimization method used, estimated parameters, objective value Hubber loss algorithm, performance statistics RRi model convergence code optimization method.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.summary.boot_RRi_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of boot_RRi_fit objects — print.summary.boot_RRi_fit","title":"Print summary of boot_RRi_fit objects — print.summary.boot_RRi_fit","text":"Prints human-readable summary bootstrap RRi model parameter estimates, including mean, standard deviation, selected quantiles parameter.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.summary.boot_RRi_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of boot_RRi_fit objects — print.summary.boot_RRi_fit","text":"","code":"# S3 method for class 'summary.boot_RRi_fit' print(x, ...)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.summary.boot_RRi_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of boot_RRi_fit objects — print.summary.boot_RRi_fit","text":"x object class \"summary.boot_RRi_fit\". ... Additional arguments.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/print.summary.boot_RRi_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of boot_RRi_fit objects — print.summary.boot_RRi_fit","text":"message (class NULL) bootstrapped parameter estimates, standard errors (SE) 95% quantile-based confidence intervals.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/sim_RRi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated RR Interval (RRi) Data with Ectopic Beats — sim_RRi","title":"Simulated RR Interval (RRi) Data with Ectopic Beats — sim_RRi","text":"data frame containing simulated RR interval (RRi) signal generated using dual-logistic model described Castillo-Aguilar et al. (2025). data produced first computing theoretical RRi curve based specified model parameters, adding Gaussian noise mimic natural variability, finally introducing ectopic beats modifying 5% data points (multiplying factor 0.3 1.7). simulated dataset intended demonstrating testing preprocessing modeling functions provided CardioCurveR package.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/sim_RRi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated RR Interval (RRi) Data with Ectopic Beats — sim_RRi","text":"","code":"sim_RRi"},{"path":"https://matcasti.github.io/CardioCurveR/reference/sim_RRi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated RR Interval (RRi) Data with Ectopic Beats — sim_RRi","text":"data frame n rows 2 variables: time numeric vector time points (seconds). RRi_simulated numeric vector simulated RR interval values (milliseconds), including added noise simulated ectopic beats.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/sim_RRi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated RR Interval (RRi) Data with Ectopic Beats — sim_RRi","text":"Simulated data generated using dual-logistic model random noise.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/sim_RRi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated RR Interval (RRi) Data with Ectopic Beats — sim_RRi","text":"dual-logistic model defined : $$ RRi(t) = \\alpha + \\frac{\\beta}{1 + \\exp\\{\\lambda (t - \\tau)\\}} + \\frac{-c \\cdot \\beta}{1 + \\exp\\{\\phi (t - \\tau - \\delta)\\}}, $$ \\(\\alpha\\) baseline RRi level, \\(\\beta\\) controls amplitude drop, \\(\\lambda\\) \\(\\tau\\) define drop phase, \\(c\\), \\(\\phi\\), \\(\\delta\\) govern recovery.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/sim_RRi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated RR Interval (RRi) Data with Ectopic Beats — sim_RRi","text":"Castillo-Aguilar, et al. (2025). Enhancing Cardiovascular Monitoring: Non-linear Model Characterizing RR Interval Fluctuations Exercise Recovery. Scientific Reports, 15(1), 8628.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/sim_RRi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated RR Interval (RRi) Data with Ectopic Beats — sim_RRi","text":"","code":"data(sim_RRi)  head(sim_RRi) #>   time RRi_simulated #> 1 0.00          1312 #> 2 0.01           788 #> 3 0.02           878 #> 4 0.03           804 #> 5 0.04           806 #> 6 0.05           886  # Plot tha data library(ggplot2)  ggplot(sim_RRi, aes(time, RRi_simulated)) + geom_line(linewidth = 1/4, col = \"purple\") + labs(x = \"Time (s)\", y = \"RRi (ms)\",      title = \"Simulated RRi Signal with Ectopic Beats\") + theme_minimal()"},{"path":"https://matcasti.github.io/CardioCurveR/reference/summary.RRi_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for RRi_fit objects — summary.RRi_fit","title":"Summary method for RRi_fit objects — summary.RRi_fit","text":"Provides detailed summary fitted dual-logistic model, including measures fit residual sum squares (RSS), total sum squares (TSS), R-squared. summary also includes basic information optimization.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/summary.RRi_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for RRi_fit objects — summary.RRi_fit","text":"","code":"# S3 method for class 'RRi_fit' summary(object, ...)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/summary.RRi_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for RRi_fit objects — summary.RRi_fit","text":"object object class \"RRi_fit\". ... Additional arguments (unused).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/summary.RRi_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for RRi_fit objects — summary.RRi_fit","text":"list following components: method optimization method used. parameters estimated parameters model. objective_value final value objective (Huber loss) function. convergence integer code indicating convergence (0 indicates success). RSS Residual sum squares. TSS Total sum squares observed RRi values. R_squared Coefficient determination. n number observations used.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/summary.boot_RRi_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for boot_RRi_fit objects — summary.boot_RRi_fit","title":"Summary method for boot_RRi_fit objects — summary.boot_RRi_fit","text":"Computes summary statistics estimated parameter across bootstrap replicates. parameter, summary includes mean, standard deviation, 2.5\\","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/summary.boot_RRi_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for boot_RRi_fit objects — summary.boot_RRi_fit","text":"","code":"# S3 method for class 'boot_RRi_fit' summary(object, robust = TRUE, ...)"},{"path":"https://matcasti.github.io/CardioCurveR/reference/summary.boot_RRi_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for boot_RRi_fit objects — summary.boot_RRi_fit","text":"object object class \"boot_RRi_fit\". robust Logical. TRUE (default) uses median MAD centrality dispersion measures. FALSE uses mean standard deviation instead. ... Additional arguments (unused).","code":""},{"path":"https://matcasti.github.io/CardioCurveR/reference/summary.boot_RRi_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for boot_RRi_fit objects — summary.boot_RRi_fit","text":"list summary statistics parameter.","code":""},{"path":"https://matcasti.github.io/CardioCurveR/news/index.html","id":"cardiocurver-100","dir":"Changelog","previous_headings":"","what":"CardioCurveR 1.0.0","title":"CardioCurveR 1.0.0","text":"Initial CRAN submission.","code":""}]
